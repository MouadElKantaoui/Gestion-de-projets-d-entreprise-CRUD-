// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetFinal.Data;

#nullable disable

namespace ProjetFinal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250814200326_Tune_Models")]
    partial class Tune_Models
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeveloppeurProjet", b =>
                {
                    b.Property<int>("DeveloppeursId")
                        .HasColumnType("int");

                    b.Property<int>("ProjetsId")
                        .HasColumnType("int");

                    b.HasKey("DeveloppeursId", "ProjetsId");

                    b.HasIndex("ProjetsId");

                    b.ToTable("DeveloppeurProjet");
                });

            modelBuilder.Entity("ProjetFinal.Models.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Voie")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("ProjetFinal.Models.Developpeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Anciennete")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Developpeurs");
                });

            modelBuilder.Entity("ProjetFinal.Models.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId")
                        .IsUnique();

                    b.ToTable("Entreprises");
                });

            modelBuilder.Entity("ProjetFinal.Models.Projet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<int>("Progression")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("DeveloppeurProjet", b =>
                {
                    b.HasOne("ProjetFinal.Models.Developpeur", null)
                        .WithMany()
                        .HasForeignKey("DeveloppeursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetFinal.Models.Projet", null)
                        .WithMany()
                        .HasForeignKey("ProjetsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetFinal.Models.Developpeur", b =>
                {
                    b.HasOne("ProjetFinal.Models.Entreprise", "Entreprise")
                        .WithMany("Developpeurs")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("ProjetFinal.Models.Entreprise", b =>
                {
                    b.HasOne("ProjetFinal.Models.Adresse", "Adresse")
                        .WithOne("Entreprise")
                        .HasForeignKey("ProjetFinal.Models.Entreprise", "AdresseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("ProjetFinal.Models.Projet", b =>
                {
                    b.HasOne("ProjetFinal.Models.Entreprise", "Entreprise")
                        .WithMany("Projets")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("ProjetFinal.Models.Adresse", b =>
                {
                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("ProjetFinal.Models.Entreprise", b =>
                {
                    b.Navigation("Developpeurs");

                    b.Navigation("Projets");
                });
#pragma warning restore 612, 618
        }
    }
}
